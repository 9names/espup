name: Continuous Deployment

on:
  release:
    types: [created]

env:
  CARGO_TERM_COLOR: always

jobs:
  publish-release:
    name: Generating artifact for ${{ matrix.job.target }}
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - os: macos-latest
            target: x86_64-apple-darwin
            binary-postfix: ""
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary-postfix: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary-postfix: ".exe"
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary-postfix: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            binary-postfix: ""
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Replace target string
        if: matrix.job.target == 'aarch64-unknown-linux-gnu'
        uses: mad9000/actions-find-and-replace-string@1
        id: findandreplace
        with:
          source: ${{ matrix.job.target }}
          find: "unknown-"
          replace: ""
      - name: Install dependencies
        if: matrix.job.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo sed -i 's/azure\.//' /etc/apt/sources.list
          sudo apt-get update
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal main universe" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal-updates main universe" | sudo tee -a /etc/apt/sources.list
          sudo apt update
          sudo dpkg --add-architecture arm64
          sudo apt-get install -y curl git libudev-dev musl-tools pkg-config "libudev1:arm64" "libgcc-s1:arm64" "libc6:arm64" "libudev-dev:arm64" gcc-arm-linux-gnueabihf pkg-config-arm-linux-gnueabihf gcc-aarch64-linux-gnu pkg-config-aarch64-linux-gnu
          echo "PKG_CONFIG_ALLOW_SYSTEM_LIBS=0" >> $GITHUB_ENV
          echo "PKG_CONFIG_DIR=/opt/" >> $GITHUB_ENV
          echo "PKG_CONFIG_LIBDIR=/opt/usr/lib/pkgconfig:/opt/usr/share/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/${{ steps.findandreplace.outputs.value }}/pkgconfig" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=${{ steps.findandreplace.outputs.value }}-gcc" >> $GITHUB_ENV
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          target: ${{ matrix.job.target }}
          override: true
      - uses: Swatinem/rust-cache@v1
      - name: Cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.job.target }}
      - name: Compress (Unix)
        if: ${{ matrix.job.os != 'windows-latest' }}
        run: zip -j espup-${{ matrix.job.target }}.zip target/${{ matrix.job.target }}/release/espup${{ matrix.job.binary-postfix }}

      - name: Compress (Windows)
        if: ${{ matrix.job.os == 'windows-latest' }}
        run: Compress-Archive target/${{ matrix.job.target }}/release/espup${{ matrix.job.binary-postfix }} espup-${{ matrix.job.target }}.zip

      - uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: espup-${{ matrix.job.target }}.zip
          tag: ${{ github.ref }}

  # publish-cargo:
  #   name: Publishing to Cargo
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         profile: minimal
  #         override: true
  #     - uses: Swatinem/rust-cache@v1
  #     - uses: actions-rs/cargo@v1
  #       with:
  #         command: publish
  #         args: --token ${{ secrets.CARGO_API_KEY }}
